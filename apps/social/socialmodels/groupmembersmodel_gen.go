// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package socialmodels

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/iceymoss/go-hichat-api/pkg/db"
	"github.com/pkg/errors"
	"gorm.io/gorm"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	groupMembersFieldNames          = builder.RawFieldNames(&GroupMembers{})
	groupMembersRows                = strings.Join(groupMembersFieldNames, ",")
	groupMembersRowsExpectAutoSet   = strings.Join(stringx.Remove(groupMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	groupMembersRowsWithPlaceHolder = strings.Join(stringx.Remove(groupMembersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheGroupMembersIdPrefix            = "cache:groupMembers:id:"
	cacheGroupMembersGroupIdUserIdPrefix = "cache:groupMembers:groupId:userId:"
)

type (
	groupMembersModel interface {
		Insert(ctx context.Context, data *GroupMembers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GroupMembers, error)
		FindByGroudIdAndUserId(ctx context.Context, userId, groupId string) (GroupMembers, error)
		ListByUserId(ctx context.Context, userId string) ([]*GroupMembers, error)
		ListByGroupId(ctx context.Context, groupId string) ([]*GroupMembers, error)
		Update(ctx context.Context, data *GroupMembers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGroupMembersModel struct {
		sqlc.CachedConn
		table     string
		mysqlConn *gorm.DB
	}

	GroupMembers struct {
		Id          int64     `db:"id"`
		GroupId     string    `db:"group_id"`
		UserId      string    `db:"user_id"`
		RoleLevel   int       `db:"role_level"`
		JoinTime    time.Time `db:"join_time"`
		JoinSource  int       `db:"join_source"`
		InviterUid  string    `db:"inviter_uid"`
		OperatorUid string    `db:"operator_uid"`
	}
)

func newGroupMembersModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultGroupMembersModel {
	return &defaultGroupMembersModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`group_members`",
		mysqlConn:  db.GetMysqlConn(db.MYSQL_DB_HICHAT2),
	}
}

func (m *defaultGroupMembersModel) Delete(ctx context.Context, id int64) error {
	result := m.mysqlConn.Table(m.table).Delete(&GroupMembers{Id: id})
	if result.Error != nil {
		return result.Error
	}
	if result.RowsAffected == 0 {
		return fmt.Errorf("record not found")
	}
	return nil
}

func (m *defaultGroupMembersModel) FindOne(ctx context.Context, id int64) (*GroupMembers, error) {
	groupMembersIdKey := fmt.Sprintf("%s%v", cacheGroupMembersIdPrefix, id)
	var resp GroupMembers
	err := m.QueryRowCtx(ctx, &resp, groupMembersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMembersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGroupMembersModel) FindByGroudIdAndUserId(ctx context.Context, userId, groupId string) (GroupMembers, error) {
	var resp GroupMembers
	res := m.mysqlConn.Table(m.table).Where("user_id = ?", userId).Where("group_id = ?", groupId).First(&resp)
	if res.Error != nil {
		return resp, res.Error
	}

	return resp, nil

}

func (m *defaultGroupMembersModel) ListByUserId(ctx context.Context, userId string) ([]*GroupMembers, error) {
	var resp []*GroupMembers
	err := m.mysqlConn.Table(m.table).Select([]string{"group_id", "user_id"}).Where("user_id = ?", userId).Find(&resp).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return resp, nil
}

func (m *defaultGroupMembersModel) ListByGroupId(ctx context.Context, groupId string) ([]*GroupMembers, error) {
	query := fmt.Sprintf("select %s from %s where `group_id` = ?", groupMembersRows, m.table)

	var resp []*GroupMembers
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, groupId)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultGroupMembersModel) Insert(ctx context.Context, data *GroupMembers) (sql.Result, error) {
	res := m.mysqlConn.Create(&data)
	if res.Error != nil {
		return nil, res.Error
	}

	if res.RowsAffected == 0 {
		return nil, errors.New("add mebers for group")
	}

	return nil, nil
}

func (m *defaultGroupMembersModel) Update(ctx context.Context, data *GroupMembers) error {
	var member GroupMembers
	err := m.mysqlConn.Table(m.table).Where("id = ?", data.Id).Find(&member).Error
	if err != nil {
		return err
	}
	if data.UserId != "" {
		member.UserId = data.UserId
	}
	if data.GroupId != "" {
		member.GroupId = data.GroupId
	}
	if data.RoleLevel != 0 {
		data.RoleLevel = data.RoleLevel
	}
	err = m.mysqlConn.Table(m.table).Where("id = ?", data.Id).Save(&member).Error
	if err != nil {
		return err
	}
	return nil
}

func (m *defaultGroupMembersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGroupMembersIdPrefix, primary)
}

func (m *defaultGroupMembersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", groupMembersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGroupMembersModel) tableName() string {
	return m.table
}
